# 利用GitHub Action自动构建多框架的docker镜像
name: Buildx_Danmuji_Docker_Optimization

on:
  # master分支的push操作会触发当前脚本的执行
  push:
    branches: [ master ]
  # master分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ master ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
#  schedule:
#    - cron: '0 16 * * *'
  # 点击star时开始任务
#  watch:
#    types: started


jobs:
  Buildx_Danmuji_Docker_Optimization:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'o')"
    # 步骤
    steps:
      # 切换到主分支
      - name: Checkout
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: actions/checkout@main

      - name: Set up QEMU
        if: "contains(github.event.head_commit.message, 'o')" 
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: docker/setup-qemu-action@v1

        # 初始化Docker Buildx
      - name: Set up Docker Buildx
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: docker/setup-buildx-action@v1

        # 登录到DockerHub
      - name: Login to DockerHub
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 构建 Armv7 框架镜像
      - name: Build linux/arm/v7
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.optimization
          platforms: linux/arm/v7
          push: true
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tag_version }}-arm32v7,${{ steps.prepare.outputs.tag_latest }}-arm32v7
      # 构建 Arm64 框架镜像
      - name: Build linux/arm64
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.optimization
          platforms: linux/arm64
          push: true
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tag_version }}-arm64v8,${{ steps.prepare.outputs.tag_latest }}-arm64v8
      # 构建 Amd64 框架镜像
      - name: Build linux/amd64
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.optimization
          platforms: linux/amd64
          push: true
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tag_version }}-amd64,${{ steps.prepare.outputs.tag_latest }}-amd64
      #创建并推送多架构镜像
      - name: Create and push manifest lists
        if: "contains(github.event.head_commit.message, 'o')"
        #if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.build_args }}
        run: |
          docker manifest create -a ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-amd64     \
              ${{ steps.prepare.outputs.tag_version }}-arm32v7   \
              ${{ steps.prepare.outputs.tag_version }}-arm64v8

          docker manifest annotate ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-amd64 \
              --arch=amd64 \
              --os=linux  \
              --os-version=openjdk:8u181-jre-slim

          docker manifest annotate ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-arm32v7 \
              --arch=arm \
              --os=linux  \
              --variant=v7 \
              --os-version=topenjdk:8u181-jre-slim

          docker manifest annotate ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-arm64v8 \
              --arch=arm64 \
              --os=linux  \
              --variant=v8 \
              --os-version=openjdk:8u181-jre-slim
              

          
          docker manifest push ${{ steps.prepare.outputs.tag_version }}



          docker manifest create -a ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-amd64     \
              ${{ steps.prepare.outputs.tag_latest }}-arm32v7   \
              ${{ steps.prepare.outputs.tag_latest }}-arm64v8

          docker manifest annotate ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-amd64 \
              --arch=amd64 \
              --os=linux  \
              --os-version=openjdk:8u181-jre-slim

          docker manifest annotate ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-arm32v7 \
              --arch=arm \
              --os=linux  \
              --variant=v7 \
              --os-version=openjdk:8u181-jre-slim

          docker manifest annotate ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-arm64v8 \
              --arch=arm64 \
              --os=linux  \
              --variant=v8 \
              --os-version=openjdk:8u181-jre-slim
          


          docker manifest push ${{ steps.prepare.outputs.tag_latest }}


